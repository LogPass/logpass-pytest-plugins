[tool:pytest]
python_files = tests.py tests_*.py test_*.py
junit_family = xunit2
testpaths = tests
norecursedirs =
    tests/fixtures
    *.egg
    .eggs
    dist
    build
    docs
    .tox
    .git
    __pycache__
addopts =
    --strict-markers
    --strict-config
    --doctest-modules
    --cov=logpass_pytest_plugins
    --cov-config=setup.cfg
    --cov-report=term
    --cov-report=xml
    # disable logpass pytest plugins, so they can be test with `pytester`
    -p no:rest_framework
    -p no:channels
    -p no:auto_pytest_factoryboy
    # plugins used only for logpass pytest plugins tests
    -p no:asyncio
    -p no:django
    -p no:pytest-factoryboy
pytester_example_dir = tests/fixtures/
# test shouldn't take longer than 10s!
timeout = 10


[flake8]
format = wemake
show-source = True
statistics = False
doctests = True
enable-extensions = G

# plugins
max-complexity = 6
max-line-length = 80
multiline-quotes = '''
pytest-fixture-no-parentheses = true
pytest-mark-no-parentheses = true
min_python_version = 3.7.0
exclude =
  .git
  .github
  __pycache__
  .venv
  .eggs
  *.egg
  tests/fixtures/
ignore =
  # D100: Missing docstring in public module
  D100,
  # D104: Missing docstring in public package
  D104,
  # D106:  Missing docstring in public nested class
  D106,
  # W503: line break before binary operator
  W503,
  # RST303: Unknown directive type
  RST303,
  # RST304: Unknown interpreted text role
  RST304,
per-file-ignores =
  logpass_pytest_plugins/contrib/auto_pytest_factoryboy.py:
    # WPS201: Found module with too many imports: 13 > 12
    WPS201,
  tests/*.py:
    # S101: use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
    S101,
    # S311: Standard pseudo-random generators are not suitable for security/cryptographic purposes.
    S311,
    # WPS226: Forbids to over-use string constants
    WPS226,
    # WPS432: Found magic number
    WPS432,

[darglint]
docstring_style = numpy
strictness = long


[isort]
line_length = 80
indent = 4
include_trailing_comma = true
use_parentheses = true
multi_line_output = 3
# add one line between `import abc` and `from abc import ABC`
lines_between_types = 1
# split imports to multline, when 2 or more imports in one line
force_grid_wrap = 2
# add projects module to first party category
known_first_party = logpass_pytest_plugins
# place imports, which section cannot be determined, to third party category
default_section = THIRDPARTY
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER


[coverage:run]
branch = True
dynamic_context = test_function
source = logpass_pytest_plugins
data_file = .tests_reports/.coverage
plugins =
  coverage_conditional_plugin

[coverage:report]
skip_covered = True
show_missing = True
sort = Cover
fail_under = 100
exclude_lines =
    pragma: no cover
    # don't complain about mypy only related code:
    if typing\.TYPE_CHECKING
    if TYPE_CHECKING
    # don't complain if tests don't hit defensive assertion code:
    raise NotImplementedError
    except ImportError

[coverage:xml]
output = .tests_reports/coverage.xml

[coverage:json]
output = .tests_reports/coverage.json

[coverage:html]
directory = .tests_reports/htmlcov
show_contexts = true

[coverage:coverage_conditional_plugin]
rules =
  "sys_version_info < (3, 8)": py-lt-38
  "sys_version_info >= (3, 8)": py-gte-38
  "sys_version_info < (3, 9)": py-lt-39
  "sys_version_info >= (3, 9)": py-gte-39


[mypy]
allow_redefinition = False
check_untyped_defs = True
disallow_any_explicit = True
disallow_any_generics = True
disallow_untyped_calls = True
disallow_untyped_decorators = True
ignore_errors = False
ignore_missing_imports = True
implicit_reexport = False
local_partial_types = True
no_implicit_optional = True
show_error_codes = True
strict_equality = True
strict_optional = True
warn_no_return = True
warn_redundant_casts = True
warn_unreachable = True
warn_unused_configs = True
warn_unused_ignores = True
